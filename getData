#!/usr/bin/env python3

import json
from dateutil.parser import parse
from datetime import datetime
from googleapiclient.discovery import build
from auth import connect
from lib import scopes


def search(creds, dataTypeName, dataSourceId, start, end, bucketByTime = 86400000):
    googleFit = build('fitness', 'v1', credentials=creds)

    # Start/End times
    startTime = parse(start)
    endTime = parse(end)

    # Convert to nanoseconds
    startID = int(startTime.timestamp() * 1000.0)
    endID = int(endTime.timestamp() * 1000.0)

    # Go get the data!
    data = googleFit.users().dataset().aggregate(
        userId="me",
        body={
            "aggregateBy": [{
                "dataTypeName": dataTypeName,
                "dataSourceId": dataSourceId
            }],
            "bucketByTime": { "durationMillis": bucketByTime }, # One day = 86400000
            "startTimeMillis": startID,
            "endTimeMillis": endID
        }).execute()
    return data

if __name__ == '__main__':
    # Since the app is running, check the args
    import argparse
    parser = argparse.ArgumentParser(description="Get Fit data")
    parser.add_argument(
        "--google-token",
        type=str,
        default="./token-for-google.json",
        help="Path to google OAuth token (default= './token-for-google.json'")
    parser.add_argument(
        "--auth-pickle",
        type=str,
        default="./token.pickle",
        help="Path to pickle containing google OAuth session (default= './token.pickle'")
    parser.add_argument("--start", type=str, required=True, help="Start Time")
    parser.add_argument("--end", type=str, required=True, help="End Time")
    parser.add_argument(
        "--output",
        "-o",
        type=str,
        required=False,
        help="Ouput json file")

    dataGroup = parser.add_mutually_exclusive_group(required=True)
    dataGroup.add_argument("--steps", action="store_true", help="Get steps")
    dataGroup.add_argument("--cals", action="store_true", help="Get calories (kcal)")
    dataGroup.add_argument("--dist", action="store_true", help="Get distance (meters)")
    dataGroup.add_argument("--all", action="store_true", help="Get all data")

    args = parser.parse_args()

    # Do OAuth...
    creds = connect(scopes, args.google_token, args.auth_pickle)

    # Set up data source
    dataTypeName = None
    dataSourceId = None
    
    output = []
    if args.steps or args.all:
        dataTypeName = "com.google.step_count.delta",
        dataSourceId = "derived:com.google.step_count.delta:com.google.android.gms:estimated_steps"
        data = search(creds, dataTypeName, dataSourceId, args.start, args.end)
        for steps in data["bucket"][0]["dataset"][0]["point"]:
            startTime = datetime.fromtimestamp(int(int(steps["startTimeNanos"]) / 1000000000))
            endTime = datetime.fromtimestamp(int(int(steps["endTimeNanos"]) / 1000000000))
            value = steps["value"][0]["intVal"]
            output.append({
                "steps": {
                    "timestamp": endTime.isoformat(),
                    "value": value,
                    "unit": "int"
                    }
            })
   
    if args.cals or args.all:
        dataTypeName = "com.google.calories.expended",
        dataSourceId = "derived:com.google.calories.expended:com.google.android.gms:merge_calories_expended"
        data = search(creds, dataTypeName, dataSourceId, args.start, args.end)
        for cals in data["bucket"][0]["dataset"][0]["point"]:
            startTime = datetime.fromtimestamp(int(int(cals["startTimeNanos"]) / 1000000000))
            endTime = datetime.fromtimestamp(int(int(cals["endTimeNanos"]) / 1000000000))
            value = int(cals["value"][0]["fpVal"])
            output.append({
                "cals": {
                    "timestamp": endTime.isoformat(),
                    "value": value,
                    "unit": "kcal"
                    }
            })

    if args.dist or args.all:
        dataTypeName = "com.google.distance.delta"
        dataSourceId = "derived:com.google.distance.delta:com.google.android.gms:merge_distance_delta"
        data = search(creds, dataTypeName, dataSourceId, args.start, args.end)
        for dist in data["bucket"][0]["dataset"][0]["point"]:
            startTime = datetime.fromtimestamp(int(int(dist["startTimeNanos"]) / 1000000000))
            endTime = datetime.fromtimestamp(int(int(dist["endTimeNanos"]) / 1000000000))
            value = int(dist["value"][0]["fpVal"])
            output.append({
                "dist": {
                    "timestamp": endTime.isoformat(),
                    "value": value,
                    "unit": "meters"
                    }
            })


    # Write to output file if requested
    if args.output:
        with open(args.output, "w") as f:
            json.dump(output, f)
            print(f"Wrote {len(data['rawdata']['points'])} points to {args.output}")
    # Otherwise, write to stdout
    else:
        print(json.dumps(output, indent=4))
